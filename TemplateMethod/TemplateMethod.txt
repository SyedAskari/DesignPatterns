DEFINITION
The intent of htis pattern is to define the skeleton of an algorithm
in an operation, deferring some steps to subclasses. It lets subclasses
redefine certain steps of an algorithm without changing the algorithm's
structure.


AbstractClass defines abstract primitive operations that concrete
subclasses define to implement steps of an algorithm.

AbstractClass defines abstract primitive operations that concrete
subclasses define to implement steps of an algorithm.

AbstractClass implements template method defining the
skeleton of an algorithm.

Use Cases for the Template Method Pattern

When you want to implement invariant parts of an algorithm only
once,and want to leave it to subclasses to implement the rest of
the behavior

When you want to control which part of an algorithm subclasses
can vary.

When you have a set of algorithms that don't vary much.

When you want to make sure the steps algorithm executes
are in a certain order.

Helps resolve Temporal Coupling.

Pattern Consequences

+ Template methods are fundamental technique for code reuse
  by pulling out the common behaviour in a parent class.
- Template methods cannot be changed:the order of methods they
  call is fixed.

Related Patterns

Factory method
Factory method can be viewed as a specialization of template
method.Template methods often use factory methods as part of
their skeleton structure.

Strategy
Template method allows varying part of an algorithm through
inheritance:a static approach.Strategy allows behavior to be
switched at runtime,via composition:a dynamic approach.

Implementation:
 -Define the template method on the
   abstract class and don't allow overriding it.
 -Mark methods that differ per subclass
   as abstract.
 -Mark methods that differ for some
   subclasses as virtual.