DEFINITION
The intent of this pattern si to define a family of algorithms, encapsulate each
one, and make them interchangeable. Startegy lets the algorithm vary independently
from clients that use it.

Strategy declares an interface common to all supported
algorithms.Context uses it to call the algorithm defined by a
ConcreteStrategy.

Context is configured with a ConcreteStrategy object and
maintains a reference to a Strategy object

Use Cases for the Strategy Pattern

When many related classes differ only in their behavior, so not in their interface.
Strategies provide a way to configure a class with many behaviors, as shown in three
different export service implementations.

When you need different variants of an algorithm which you want to
be able to switch at runtime. An export algorithm to treat different forms of export
as shown in the examples.

When your algorithm uses data,code or dependencies that the
clients shouldn't know about. Imagine exporting to a format needs
some additional configurations or properties. The client don't need
to know about this or be allowed to change it. When they are working
on an interface, they don't know about these, they only know about the
export method exisiting.

When a class defines many different behaviors which appear as a
bunch of conditional statements in its method. In other words when
you are dealing with large if or switch statements.


Pattern Consequences

+ It offers an alternative to subclassing your context. Meaning it provides an alternative to subclassing yor context.
  Continuing with our example we could have created an XML order subclass, a CSV order subclass and so on. But that would have
  hardwired the behavior into the context, the order. That makes it harder to understand and maintain the context. In order words
  you are replacing inheritance with composition.

+ New strategies can be introduced without having to change the
  context:open/closed principle.

+ It eliminates conditional statements.

+ It can provide a choice of implementations with the same behavior.

- If the client injects the strategy,it must be aware of how
  strategies differ, which means they can be exposed to implementation issues. Only use this pattern when variation in behavior is revelant to clients. 

- There's overhead in communication between the strategy and
  the context. For example when creating export services some
  of them might not export the full order, even though we do pass it through.

- Additional objects are introduced,which increases complexity. If you only have a few algorithms it
  might not be worth the additional complexity.

Related Patterns

Flyweight
Strategy objects make good flyweights

Bridge
Also based on composition,but solvesadifferent problem

State
Also based on composition,but solvesadifferent problem

Template method
Template method allows varying part of an algorithm through
inheritance:a static approach.Strategy allows behavior to be switched at
runtime,via composition:a dynamic approach.

Intent of the strategy pattern:
 -To define a family of algorithms,
   encapsulate each one,and make them
   interchangeable.

Common variation:concrete strategy
injected via method parameter